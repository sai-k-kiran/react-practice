The useReducer hook is similar to useState, but gives us a more structured approach for updating complex values.

We typically use useReducer when our state has multiple sub-values, e.g. an object containing keys that we want 
to update independently.

he useReducer hook requires 2 arguments, and has an optional 3rd argument:

    reducer - a pure function that takes a state and an action, and returns a new state value based on the action
    initialState - any initial state value, just like useState
    initializer (optional) - this is uncommon, but we'll briefly introduce it later.

The useReducer hook returns the current state, and a dispatch function to update the state.

The dispatch function takes an action, and calls the reducer to update the state.
-----------------------------------------------------------------------------------------

const initialState = 0

const reducer = (state, action) => {
    if(action.type === "INCREMENT"){
        return state + 1
    }
    if(action.type === "DECREMENT"){
        return state - 1
    }
    return state
}

const ReducerFn = () => {
    const [state, dispatch] = useReducer(reducer, initialState)

    return (
        <>
            <p>{state}</p>
            <button onClick={() => dispatch({type: "INCREMENT"})}
            <button onClick={() => dispatch({type: "DECREMENT"})}
        </>
    )
}

useReducer takes two arguments - "reducer" is a pure fn and "initialState" is the state
We have to define the "reducer" fn - const reducer = (state, action){...}. We have to define actions so that 
dispatch fn can called to update the state according to the action.

const [state, dispatch] --> state stores teh initialState and dispatch fn takes an action from reducer fn
to update teh state.
-------------------------------------------------------------------------------------

const types = {
  PET: 'PET',
  COLOR: 'COLOR',
}

const reducer = (state, action) => {
  switch (action.type) {
    case types.PET:
      return { ...state, pet: action.value }
    case types.COLOR:
      return { ...state, color: action.value }
  }
}
const initialState = {
  color: 'black',
  pet: 'cat',
}

export default function App() {
  const [state, dispatch] = useReducer(reducer, initialState)

  return (
    <div>
      <label>Choose a color and a pet: </label>
      <br />
      <select
        value={state.color}
        onChange={event => {
          dispatch({ type: types.COLOR, value: event.target.value })
        }}
      >
        <option value="black">Black</option>
        <option value="pink">Pink</option>
        <option value="blue">Blue</option>
      </select>
      <select
        value={state.pet}
        onChange={event => {
          dispatch({ type: types.PET, value: event.target.value })
        }}
      >
        <option value="cat">Cat</option>
        <option value="dog">Dog</option>
        <option value="mouse">Mouse</option>
      </select>
      <br />
      <br />
      You chose a {state.color} {state.pet}
    </div>
  )
}