import React from "react"
import ReactDom from "react-dom"

ReactDom.render(
    <ul>
        <li>First</li>
        <li>Second</li>
        <li>Third</li>
    </ul>, 
    document.getElementById("root"))

--> Diplays an unordered list on the web page

------------------OR-----------------

function MyApp() {       --> Functional component
    return (
    <ul>
        <li>First</li>
        <li>Second</li>
        <li>Third</li>
    </ul>
    )
}
ReactDom.render(
    <MyApp />, 
    document.getElementById("root")) --> same output

--------------------------------------
import React from "react"
import ReactDom from "react-dom"

function Color() {
    const date = new Date()
    const hours = date.getHours()
    let timeOfDay
    const styles = {}
    if(hours < 12) {
        timeOfDay = "morning"
        styles.color = "powderblue"
    } else if (hours => 12 && hours < 17) {
        timeOfDay ="afternoon"
        styles.color = "green"
    } else {
        timeOfDay = "night"
        styles.color = "violet"
    }
    
    return (
        <h1 style={styles}>Good {timeOfDay}</h1>   --> Inline style
    )
}

ReactDom.render(<Color />, document.getElementById("root"))
----------------------------------

const title = response.potentiallyMaliciousInput;
const element = <h1>{title}</h1>;

By default, React DOM escapes any values embedded in JSX before rendering them. 
Thus it ensures that you can never inject anything that’s not explicitly written in your application. 
Everything is converted to a string before being rendered. This helps prevent XSS (cross-site-scripting) attacks
----------------------------------

Babel compiles JSX down to React.createElement() calls.

const element = (
  <h1 className="greeting">Hello, world!</h1>
);
IS SAME AS 

const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, world!'
);
React.createElement() performs a few checks to help you write bug-free code but essentially it creates an object like this:

const element = {
  type: 'h1',
  props: {
    className: 'greeting',
    children: 'Hello, world!'
  }
};
--------------------------------

function tick() {
  const element = (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {new Date().toLocaleTimeString()}.</h2>
    </div>
  );
  ReactDOM.render(element, document.getElementById('root'));}

setInterval(tick, 1000);

Even though we create an element describing the whole UI tree on every tick, 
only the text node(showing time) whose contents have changed gets updated by React DOM.
--------------------------------

Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) 
and return React elements describing what should appear on the screen.

function Welcome(props) {       --> “function component”
  return <h1>Hello, {props.name}</h1>;
}
IS SAME AS

class Welcome extends React.Component {   --> “class component”
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}
-------------------------------

function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
}

const element = <Welcome name="Sai" />;
ReactDOM.render(
  element,
  document.getElementById('root')
);
    1.React calls the Welcome component with {name: 'Sai'} as the props.
    2.Our Welcome component returns a <h1>Hello, Sai</h1> element as the result.
    3.React DOM efficiently updates the DOM to match <h1>Hello, Sai</h1>.
--------------------------------

function formatDate(date) {
  return date.toLocaleDateString();
}

function Avatar(props) {
  return (
    <img
      className="Avatar"
      src={props.user.avatarUrl}
      alt={props.user.name}
    />
  );
}

function UserInfo(props) {
  return (
    <div className="UserInfo">
      <Avatar user={props.user} />
      <div className="UserInfo-name">{props.user.name}</div>
    </div>
  );
}

function Comment(props) {
  return (
    <div className="Comment">
      <UserInfo user={props.author} />
      <div className="Comment-text">{props.text}</div>
      <div className="Comment-date">
        {formatDate(props.date)}
      </div>
    </div>
  );
}

const comment = {
  date: new Date(),
  text: 'I hope you enjoy learning React!',
  author: {
    name: 'Hello Kitty',
    avatarUrl: 'https://placekitten.com/g/64/64',
  },
};
ReactDOM.render(
  <Comment
    date={comment.date}
    text={comment.text}
    author={comment.author}
  />,
  document.getElementById('root')
);
----------------------------------

COMPONENT CONSTRUCTOR

If there is a constructor() function in your component, this function will be called when the component gets initiated.
The constructor function is where you initiate the component's properties.
In React, component properties should be kept in an object called state.

The constructor function is also where you honor the inheritance of the parent component by including the super() statement, 
which executes the parent component's constructor function, and your component has access to all the functions of the 
parent component (React.Component).

By including "super()" in the constructor function of a component, it can access all the functuons of its parent component
i.e the React.component (or any other component you are inheriting from)

class Car extends React.Component {
  constructor() {
    super();              --> constructor fn has access to all fns of React.component 
    this.state = {color: "red"};
  }
  render() {
    return <h2>I am a {this.state.color} Car!</h2>;
  } --> I am a 'red' Car coz "this.state.color" is red in the constructor fn
}
-------------------------------------
IN APP.JS -->
import React from 'react';
import ReactDOM from 'react-dom';

class Car extends React.Component {
  render() {
    return <h2>Hi, I am a Car!</h2>;
  }
}
IN MAIN.JS -->
export default Car;

import React from 'react';
import ReactDOM from 'react-dom';
import Car from './App.js';

ReactDOM.render(<Car />, document.getElementById('root'));
--------------------------------------

ES6

class Car {   --> ES6 class for creating an object
  constructor(name) {
    this.brand = name;
  }
}

mycar = new Car("Ford");

class Car {
  constructor(name) {
    this.brand = name;
  }
  present() {                        --> a fn inside a class is a method
    return 'I have a ' + this.brand;
  }
}

mycar = new Car("Ford");
mycar.present();  --> calling a method

To create a class inheritance, use the extends keyword.
A class created with a class inheritance inherits all the methods from another class:

class Car {
  constructor(name) {
    this.brand = name;
  }
  present() {
    return 'I have a ' + this.brand;
  }
}

class Model extends Car {    --> class "Model" inherits from "Car"
  constructor(name, mod) {
    super(name);
    this.model = mod;
  }  
  show() {
      return this.present() + ', it is a ' + this.model
  }
}
mycar = new Model("Ford", "Mustang");
mycar.show();

The super() method refers to the parent class.
By calling the super() method in the constructor method, we call the parent's constructor method and gets access to the 
parent's properties and methods.

The handling of this is also different in arrow functions compared to regular functions.
In short, with arrow functions there are no binding of this.
In regular functions the this keyword represents the object that called the function, which could be the window, the document, 
a button or whatever.
With arrow functions, the this keyword always represents the object that defined the arrow function.

With a regular function, "this" represents the object that called the function.

class Header {
  constructor() {
    this.color = "Red";
  }

//Regular function:
  changeColor = function() {
    document.getElementById("demo").innerHTML += this;
  }
}

myheader = new Header();

//The window object calls the function:
window.addEventListener("load", myheader.changeColor);

//A button object calls the function:
document.getElementById("btn").addEventListener("click", myheader.changeColor);

Once the myheader(that contains changeColor fn) is called by window load event and once by button click event.
Regular fns represents a window object and a HTML object but the arrow fn will represents the header object no matter 
which event called the fn

class Header {
  constructor() {
    this.color = "Red";
  }

//Arrow function:
  changeColor = () => {
    document.getElementById("demo").innerHTML += this;
  }
}

myheader = new Header();


//The window object calls the function:
window.addEventListener("load", myheader.changeColor);

//A button object calls the function:
document.getElementById("btn").addEventListener("click", myheader.changeColor);

With an arrow function, this represents the Header object no matter who called the function
--------------------------------------
PROPS 

Another way of handling component properties is by using props.
Props are passed to components via HTML attributes.
Props are like function arguments, and you send them into the "component" as attributes.
React Props are read-only! You will get an error if you try to change their value.

class Car extends React.Component {
  render() {
    return <h2>I am a {this.props.color} Car!</h2>;
  }
}

ReactDOM.render(<Car color="red"/>, document.getElementById('root')); --> I am a 'red' Car
----------------------------------------

class Car extends React.Component {
  render() {
    return <h2>I am a {this.props.brand.model}!</h2>;
  }
}

class Garage extends React.Component {
  render() {
    const carinfo = {name: "Ford", model: "Mustang"};
    return (
      <div>
      <h1>Who lives in my garage?</h1>
      <Car brand={carinfo} />
      </div>
    );
  }
}

ReactDOM.render(<Garage />, document.getElementById('root'));
--------------------------------------

class Car extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <h2>I am a {this.props.model}!</h2>;
  }
}

ReactDOM.render(<Car model="Mustang"/>, document.getElementById('root'));
--------------------------------------

STATE 

React components has a built-in state object.
The state object is where you store property values that belongs to the component.
When the state object changes, the component re-renders.

class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      brand: "Ford",
      model: "Mustang",
      color: "red",
      year: 1964
    };
  }
  render() {
    return (
        <h1>My Car</h1>
    );
  }
}

Refer to the state object anywhere in the component by using the this.state.propertyname syntax

class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      brand: "Ford",
      model: "Mustang",
      color: "red",
      year: 1964
    };
  }
  render() {
    return (
      <div>
        <h1>My {this.state.brand}</h1>
        <p>
          It is a {this.state.color}
          {this.state.model}
          from {this.state.year}.
        </p>
      </div>
    );
  }
}

To change a value in the state object(this.state), use the this.setState() method.
When a value in the state object changes, the component will re-render, meaning that the output will change 
according to the new value.

class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      brand: "Ford",
      model: "Mustang",
      color: "red",
      year: 1964
    };
  }
  changeColor = () => {
    this.setState({color: "blue"});
  }
  render() {
    return (
      <div>
        <h1>My {this.state.brand}</h1>
        <p>
          It is a {this.state.color}
          {this.state.model}
          from {this.state.year}.
        </p>
        <button
          type="button"
          onClick={this.changeColor}
        >Change color</button>
      </div>
    );
  }
}

Always use the setState() method to change the state object, it will ensure that the component knows 
its been updated and calls the render() method (and all the other lifecycle methods).
-------------------------------------

LIFECYCLE 

Each component in React has a lifecycle which you can monitor and manipulate during its three main phases.
The three phases are: Mounting, Updating, and Unmounting.

Mounting means putting elements into the DOM.
React has four built-in methods that gets called, in this order, when mounting a component:
    constructor()
    getDerivedStateFromProps()
    render()
    componentDidMount()

The render() method is required and will always be called, the others are optional and will be called if you define them.

The constructor method is called, by React, every time you make a component
The constructor() method  is used to set up the initial sttaes and values
the super(props) will initiate the parent's constructor method and allows the component to inherit methods 
from its parent (React.Component).

The getDerivedStateFromProps() method is called right before rendering the element(s) in the DOM.
This is the natural place to set the state object based on the initial props.
It takes state as an argument, and returns an object with changes to the state.

The example below starts with the favorite color being "red", but the getDerivedStateFromProps() method 
updates the favorite color based on the favcol attribute:

class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  static getDerivedStateFromProps(props, state) {
    return {favoritecolor: props.favcol };
  }
  render() {
    return (
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
    );
  }
}

ReactDOM.render(<Header favcol="yellow"/>, document.getElementById('root'));

The render() method is required, and is the method that actually outputs the HTML to the DOM.

componentDidMount() method is called after the component is rendered.

At first my favorite color is red, but after a second, and it is yellow instead:

class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 1000)
  }
  render() {
    return (
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
    );
  }
}

ReactDOM.render(<Header />, document.getElementById('root'));

A component is updated whenever there is a change in the component's state or props.

React has five built-in methods that gets called, in this order, when a component is updated:
    getDerivedStateFromProps()
    shouldComponentUpdate()
    render()
    getSnapshotBeforeUpdate()
    componentDidUpdate()

getDerivedStateFromProps() is first method that is called when a component gets updated.

example below has a button that changes the favorite color to blue, but since the getDerivedStateFromProps() method is called, 
which updates the state with the color from the favcol attribute, the favorite color is still rendered as yellow:

class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  static getDerivedStateFromProps(props, state) {
    return {favoritecolor: props.favcol };
  }
  changeColor = () => {
    this.setState({favoritecolor: "blue"});
  }
  render() {
    return (
      <div>
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
      <button type="button" onClick={this.changeColor}>Change color</button>
      </div>
    );
  }
}

ReactDOM.render(<Header favcol="yellow"/>, document.getElementById('root'));

shouldComponentUpdate() method you can return a Boolean value that specifies whether 
React should continue with the rendering or not.
The default value is true.

The example below shows what happens when the shouldComponentUpdate() method returns false:

class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  shouldComponentUpdate() {
    return false;
  }
  changeColor = () => {
    this.setState({favoritecolor: "blue"});
  }
  render() {
    return (
      <div>
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
      <button type="button" onClick={this.changeColor}>Change color</button>
      </div>
    );
  }
}

ReactDOM.render(<Header />, document.getElementById('root'));
--> "My Favorite Color is red" and no change when the button is clicked

In the getSnapshotBeforeUpdate() method you have access to the props and state before the update, 
meaning that even after the update, you can check what the values were before the update.

If the getSnapshotBeforeUpdate() method is present, you should also include the componentDidUpdate() method, 
otherwise you will get an error.

class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 1000)
  }
  getSnapshotBeforeUpdate(prevProps, prevState) {
    document.getElementById("div1").innerHTML =
    "Before the update, the favorite was " + prevState.favoritecolor;
  }
  componentDidUpdate() {
    document.getElementById("div2").innerHTML =
    "The updated favorite is " + this.state.favoritecolor;
  }
  render() {
    return (
      <div>
        <h1>My Favorite Color is {this.state.favoritecolor}</h1>
        <div id="div1"></div>
        <div id="div2"></div>
      </div>
    );
  }
}

ReactDOM.render(<Header />, document.getElementById('root'));
--> After 1 sec, favoritecolor changes to  yellow and the previous and the updated colors are shown 

componentDidUpdate method is called after the component is updated in the DOM.

class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 1000)
  }
  componentDidUpdate() {
    document.getElementById("mydiv").innerHTML =
    "The updated favorite is " + this.state.favoritecolor;
  }
  render() {
    return (
      <div>
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
      <div id="mydiv"></div>
      </div>
    );
  }
}

ReactDOM.render(<Header />, document.getElementById('root'));
--> a timer changes the state, and the color becomes "yellow".componentDidUpdate method executed and writes a message

React has only one built-in method that gets called when a component is unmounted:

    componentWillUnmount()

componentWillUnmount method is called when the component is about to be removed from the DOM.

class Container extends React.Component {
  constructor(props) {
    super(props);
    this.state = {show: true};
  }
  delHeader = () => {
    this.setState({show: false});
  }
  render() {
    let myheader;
    if (this.state.show) {
      myheader = <Child />;
    };
    return (
      <div>
      {myheader}
      <button type="button" onClick={this.delHeader}>Delete Header</button>
      </div>
    );
  }
}

class Child extends React.Component {
  componentWillUnmount() {
    alert("The component named Header is about to be unmounted.");
  }
  render() {
    return (
      <h1>Hello World!</h1>
    );
  }
}

ReactDOM.render(<Container />, document.getElementById('root'));
-----------------------------------------

EVENTS

React event handlers are written inside curly braces: onClick={shoot} instead of onClick="shoot()"

HTML --> <button onclick="shoot()">Take the Shot!</button>

REACT --> <button onClick={shoot}>Take the Shot!</button>

class Football extends React.Component {
  shoot() {
    alert("Great Shot!");
  }
  render() {
    return (
      <button onClick={this.shoot}>Take the shot!</button>
    );
  }
}

ReactDOM.render(<Football />, document.getElementById('root'));

class Football extends React.Component {
  shoot = () => {
    alert(this);
    /*
    The 'this' keyword refers to the component object
    */
  }
  render() {
    return (
      <button onClick={this.shoot}>Take the shot!</button>
    );
  }
}

ReactDOM.render(<Football />, document.getElementById('root'));

If you must use regular functions instead of arrow functions you have to bind "this" to the component 
instance using the bind() method:

class Football extends React.Component {
  constructor(props) {
    super(props)
    this.shoot = this.shoot.bind(this)
  }
  shoot() {
    alert(this);
    /*
    Thanks to the binding in the constructor function,
    the 'this' keyword now refers to the component object
    */
  }
  render() {
    return (
      <button onClick={this.shoot}>Take the shot!</button>
    );
  }
}

ReactDOM.render(<Football />, document.getElementById('root'));

Without the binding, the "this" keyword would return undefined.

If you want to send parameters into an event handler, you have two options:

1. Make an anonymous arrow function:

class Football extends React.Component {
  shoot = (a) => {
    alert(a);
  }
  render() {
    return (
      <button onClick={() => this.shoot("Goal")}>Take the shot!</button>
    );
  }
}

ReactDOM.render(<Football />, document.getElementById('root'));

2. Bind the event handler to "this". Note that the first argument has to be "this".

class Football extends React.Component {
  shoot(a) {
    alert(a);
  }
  render() {
    return (
      <button onClick={this.shoot.bind(this, "Goal")}>Take the shot!</button>
    );
  }
}

ReactDOM.render(<Football />, document.getElementById('root'));

If you send arguments without using the bind method, (this.shoot(this, "Goal") instead of this.shoot.bind(this, "Goal")), 
the shoot function will be executed when the page is loaded instead of waiting for the button to be clicked. 

Event handlers have access to the React event that triggered the function.

class Football extends React.Component {
  shoot = (a, b) => {
    alert(b.type);
    /*
    'b' represents the React event that triggered the function,
    in this case the 'click' event
    */
  }
  render() {
    return (
      <button onClick={(ev) => this.shoot("Goal", ev)}>Take the shot!</button>
    );
  }
}

ReactDOM.render(<Football />, document.getElementById('root'));
--> alerts "click"

Without arrow function, the React event object is sent automatically as the last argument when using the bind() method:

class Football extends React.Component {
  shoot = (a, b) => {
    alert(b.type);
    /*
    'b' represents the React event that triggered the function,
    in this case the 'click' event
    */
  }
  render() {
    return (
      <button onClick={this.shoot.bind(this, "Goal")}>Take the shot!</button>
    );
  }
}

ReactDOM.render(<Football />, document.getElementById('root'));
--------------------------------------

FORMS 

class MyForm extends React.Component {
  render() {
    return (
      <form>
        <h1>Hello</h1>
        <p>Enter your name:</p>
        <input type="text" />
      </form>
    );
  }
}
ReactDOM.render(<MyForm />, document.getElementById('root'));

In HTML, form data is usually handled by the DOM. In React, form data is usually handled by the components.
When the data is handled by the components, all the data is stored in the component state.
You can control changes by adding event handlers in the onChange attribute:

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = { username: '' };
  }
  myChangeHandler = (event) => {
    this.setState({username: event.target.value}); --> You get access to the field value by using the event.target.value
  }
  render() {
    return (
      <form>
      <h1>Hello {this.state.username}</h1>
      <p>Enter your name:</p>
      <input
        type='text'
        onChange={this.myChangeHandler}
      />
      </form>
    );
  }
}

ReactDOM.render(<MyForm />, document.getElementById('root'));
--> whatever you type in the input box will be diplayed as "Hello (entered text)"

You get access to the field value by using the event.target.value syntax.

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = { username: '' };
  }
  myChangeHandler = (event) => {
    this.setState({username: event.target.value});
  }
  render() {
    let header = '';
    if (this.state.username) {
      header = <h1>Hello {this.state.username}</h1>;
    } else {
      header = '';
    }
    return (
      <form>
      {header}
      <p>Enter your name:</p>
      <input
        type='text'
        onChange={this.myChangeHandler}
      />
      </form>
    );
  }
}

ReactDOM.render(<MyForm />, document.getElementById('root'));

You can control the submit action by adding an event handler in the "onSubmit" attribute:

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = { username: '' };
  }
  mySubmitHandler = (event) => {
    event.preventDefault();
    alert("You are submitting " + this.state.username);
  }
  myChangeHandler = (event) => {
    this.setState({username: event.target.value});
  }
  render() {
    return (
      <form onSubmit={this.mySubmitHandler}>
      <h1>Hello {this.state.username}</h1>
      <p>Enter your name, and submit:</p>
      <input
        type='text'
        onChange={this.myChangeHandler}
      />
      <input
        type='submit'
      />
      </form>
    );
  }
}

ReactDOM.render(<MyForm />, document.getElementById('root'));
--> alerts "You are submitting (entered text)"

You can control the values of more than one input field by adding a "name" attribute to each element.
i.e <input type="text" name="username" place...> 

To access the fields in the event handler use the event.target.name and event.target.value syntax.
    event.target.name for property name i.e name="username", here "username" is the property name
    event.target.value for the inputted text against the property name(username, age..)

To update the state in the this.setState method, use square brackets [bracket notation] around the property name.

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      username: '',
      age: null,
    };
  }
  myChangeHandler = (event) => {
    let nam = event.target.name;
    let val = event.target.value;
    this.setState({[nam]: val});  --> [nam] is for username and age which are property names & val is for inputted text
  }
  render() {
    return (
      <form>
      <h1>Hello {this.state.username} {this.state.age}</h1>
      <p>Enter your name:</p>
      <input
        type='text'
        name='username'
        onChange={this.myChangeHandler}
      />
      <p>Enter your age:</p>
      <input
        type='text'
        name='age'
        onChange={this.myChangeHandler}
      />
      </form>
    );
  }
}

ReactDOM.render(<MyForm />, document.getElementById('root'));

For validating the forms 

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      username: '',
      age: null,
    };
  }
  myChangeHandler = (event) => {
    let nam = event.target.name;
    let val = event.target.value;
    if (nam === "age") {   --> if the property name = age & if the entered text is not a number
      if (!Number(val)) {
        alert("Your age must be a number");
      }
    }
    this.setState({[nam]: val});
  }
  render() {
    return (
      <form>
      <h1>Hello {this.state.username} {this.state.age}</h1>
      <p>Enter your name:</p>
      <input
        type='text'
        name='username'
        onChange={this.myChangeHandler}
      />
      <p>Enter your age:</p>
      <input
        type='text'
        name='age'
        onChange={this.myChangeHandler}
      />
      </form>
    );
  }
}

ReactDOM.render(<MyForm />, document.getElementById('root'));

Same example, but with the validation at form submit:

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      username: '',
      age: null,
    };
  }
  mySubmitHandler = (event) => {
    event.preventDefault();
    let age = this.state.age;
    if (!Number(age)) {
      alert("Your age must be a number");
    }
  }
  myChangeHandler = (event) => {
    let nam = event.target.name;
    let val = event.target.value;
    this.setState({[nam]: val});
  }
  render() {
    return (
      <form onSubmit={this.mySubmitHandler}>
      <h1>Hello {this.state.username} {this.state.age}</h1>
      <p>Enter your name:</p>
      <input
        type='text'
        name='username'
        onChange={this.myChangeHandler}
      />
      <p>Enter your age:</p>
      <input
        type='text'
        name='age'
        onChange={this.myChangeHandler}
      />
      <br/>
      <br/>
      <input type='submit' />
      </form>
    );
  }
}

ReactDOM.render(<MyForm />, document.getElementById('root'));

For error messages

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      username: '',
      age: null,
      errormessage: ''
    };
  }
  myChangeHandler = (event) => {
    let nam = event.target.name;
    let val = event.target.value;
    let err = '';
    if (nam === "age") {
      if (val !="" && !Number(val)) { --> if the age is not empty or a number, shows an error
        err = <strong>Your age must be a number</strong>;
      }
    }
    this.setState({errormessage: err});
    this.setState({[nam]: val});
  }
  render() {
    return (
      <form>
      <h1>Hello {this.state.username} {this.state.age}</h1>
      <p>Enter your name:</p>
      <input
        type='text'
        name='username'
        onChange={this.myChangeHandler}
      />
      <p>Enter your age:</p>
      <input
        type='text'
        name='age'
        onChange={this.myChangeHandler}
      />
      {this.state.errormessage}
      </form>
    );
  }
}

ReactDOM.render(<MyForm />, document.getElementById('root'));

In HTML the value of a textarea was the text between the start tag <textarea> and the end tag </textarea>, 
in React the value of a textarea is placed in a value attribute:

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      description: 'The content of a textarea goes in the value attribute'
    };
  }
  render() {
    return (
      <form>
      <textarea value={this.state.description} />
      </form>
    );
  }
}

ReactDOM.render(<MyForm />, document.getElementById('root'));

A simple select box, where the selected value "Volvo" is initialized in the constructor:

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      mycar: 'Volvo'
    };
  }
  render() {
    return (
      <form>
      <select value={this.state.mycar}>
        <option value="Ford">Ford</option>
        <option value="Volvo">Volvo</option>
        <option value="Fiat">Fiat</option>
      </select>
      </form>
    );
  }
}

ReactDOM.render(<MyForm />, document.getElementById('root'));
-----------------------------------------

STYLE REACT USING CSS 

class MyHeader extends React.Component {
  render() {
    return (
      <div>
      <h1 style={{color: "red"}}>Hello Style!</h1>  --> inline styling
      <p>Add a little style!</p>
      </div>
    );
  }
}

In JSX, JavaScript expressions are written inside curly braces, and since JavaScript objects also use curly braces, 
the styling in the example above is written inside two sets of curly braces {{}}

You can also create a JavaScript object with styling information, and refer to it in the style attribute:

class MyHeader extends React.Component {
  render() {
    const mystyle = {  --> style object named mystyle
      color: "white",
      backgroundColor: "DodgerBlue",
      padding: "10px",
      fontFamily: "Arial"
    };
    return (
      <div>
      <h1 style={mystyle}>Hello Style!</h1>
      <p>Add a little style!</p>
      </div>
    );
  }
}

Import the stylesheet in your application: import './style.css'; if it is in same directory

Another way of adding styles to your application is to use CSS Modules.
CSS Modules are convenient for components that are placed in separate files.
The CSS inside a module is available only for the component that imported it, and you do not have to worry about name conflicts.

Create the CSS module with the .module.css extension, example: mystyle.module.css.
Import the stylesheet in your component: import styles from './mystyle.module.css';
-------------------------------------

SIMPLE LIST

const names =  ['sai', 'john', 'rob']

function Names() {
  return <h1 className="names">{names}</h1>
}

ReactDOM.render(<Names />, getElementById("root")) --> Diplays "saijohnrob"


const newNames = names.map((name) => {
  return <h1>{name}</h1>
})
function newNames() {
  return <h1 className="names">{newNames}</h1>
}  --> Diplays sai, john , rob

Objects cant be used in a list(array).

PROPER LIST

Suppose there are 3 instances of an object/string....

.map() methos iterate over every object(3 objects here) and does waht we say to do.

EX--> const names = ['sai', 'john', 'rob']  --> 3 strings in the list

names.map((item) => {
  console.log("Hello")
}) --> Thsi will display "HelloHelloHello" i.e. Hello 3 times coz we mapped to "names" array which
has 3 strings.


const Books = [
  {
    id: 1,
    img: "...",
    title: "...",
    author: "..."
  },
  {
    id: 2,
    img: ".....",
    title: ".....",
    author: "....."
  }
] --> Two Books object in the array

function Booklist() {
  return (
    <section className="booklists">
      {Books.map((book) => {  --> we are mapping book(as the parameter) with the "Books" object 
        console.log(book) --> will Diplay the img/titl/author of both the Book
      })}
  )
}
ReactDOM.render(<Booklist />, getElementById("root"))

------OR-------

function Booklist() {
  return (
    <section className="booklists">
      {Books.map((book) => {  
        return <Book key={book.id} book={book}></Book>; --> "key" is for key prop
      })}
  )
}

const Book = (props) => { --> "Book" is also a function
  const {img, title, author} = props.book; --> props destructuring. We are storing img.. values in book

  return(
    <article className="articles">
    <img>src={img} alt="" />
    <h1>{title}</h1>
    <h4>{author}</h4>
    </article>
  )
}
ReactDOM.render(<Booklist />, getElementById("root"))
--> Will display the book image, author and title

--------------------------------------

EVENTS

const Book = (props) => { 
  const {img, title, author} = props.book;
  const clickHandler = () => {
    alert("Button us clicked");
  }

  return(
    <article className="articles">
    <img>src={img} alt="" />
    <h1 onClick={() => {console.log{title}}}>{title}</h1>
    <h4 onClick={() => {console.log{author}}>{author}</h4>
    <button type="button" onClick={clickHandler}>ALERT</button>
    </article>
  )
}
--> When the title of a book is clicked, its name will be displayed on the console.
--> When the button is clicked, an alert box is displayed


const complex = (e) => {
  console.log(author)
  console.log(e.target)
}
 <button type="button" onClick={() => complex(author)}>CLICK</button>
 --> whenever "CLICK" button is clicked, it will show the author of that book.

 See that wee passed the complex as onClick={() => complex(author)} and not 
 onClick={complex(author)} coz it wont wailt for the click on "CLICK" and will invoke "complex" fn
 as the page loads.
-----------------------------------------------------------------------------------